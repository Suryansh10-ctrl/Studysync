// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]

    // Project management relations
    projectsOwned       Project[]        @relation("ProjectOwner")
    projectMemberships  ProjectMember[]
    tasksCreated        Task[]           @relation("TaskCreator")
    taskAssignments     TaskAssignee[]
    comments            Comment[]
    notifications       Notification[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// New models for project management

enum ProjectRole {
    OWNER
    ADMIN
    MEMBER
}

model Project {
    id          String          @id @default(cuid())
    name        String
    description String?
    ownerId     String
    owner       User            @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
    members     ProjectMember[]
    boards      Board[]
    tasks       Task[]
    createdAt   DateTime        @default(now())
    updatedAt   DateTime        @updatedAt

    @@index([ownerId])
    @@index([name])
}

model ProjectMember {
    id        String      @id @default(cuid())
    projectId String
    userId    String
    role      ProjectRole @default(MEMBER)

    project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
    user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime    @default(now())

    @@unique([projectId, userId])
    @@index([userId])
}

model Board {
    id        String   @id @default(cuid())
    name      String
    projectId String
    project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    columns   Column[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([projectId])
}

model Column {
    id      String  @id @default(cuid())
    name    String
    order   Int
    boardId String
    board   Board   @relation(fields: [boardId], references: [id], onDelete: Cascade)
    tasks   Task[]

    @@index([boardId])
    @@index([order])
}

model Task {
    id           String        @id @default(cuid())
    title        String
    description  String?
    projectId    String
    columnId     String?
    createdById  String
    dueDate      DateTime?
    priority     Int?

    project      Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
    column       Column?       @relation(fields: [columnId], references: [id])
    createdBy    User          @relation("TaskCreator", fields: [createdById], references: [id], onDelete: Cascade)

    assignees    TaskAssignee[]
    comments     Comment[]

    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt

    @@index([projectId])
    @@index([columnId])
    @@index([createdById])
}

model TaskAssignee {
    taskId String
    userId String

    task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    assignedAt DateTime @default(now())

    @@id([taskId, userId])
    @@index([userId])
}

model Comment {
    id        String   @id @default(cuid())
    taskId    String
    userId    String
    content   String

    task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())

    @@index([taskId])
    @@index([userId])
}

model Notification {
    id        String   @id @default(cuid())
    userId    String
    type      String
    data      Json
    read      Boolean  @default(false)
    createdAt DateTime @default(now())

    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId, read])
}
